<?xml version="1.0" encoding="UTF-8" ?> 
<!DOCTYPE mapper 
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.etc.mapper.IRoleMapper">
	<!--单条保存 -->
	<insert id="insert" parameterType="Role">
		<selectKey keyProperty="id" resultType="int" order="BEFORE">
			select nextval('seq_t_role') as id
		</selectKey>
		INSERT INTO t_role (
		id,name,level,parentId,memo,ordering,clientId,ownerId,status
		) VALUES (
		#{id},#{name},#{level},#{parentId},#{memo},#{ordering},#{clientId},#{ownerId},#{status}
		)
	</insert>
	<update id="update" parameterType="map">
	    update t_role 
		    set name = #{name},
		    level = #{level},
		    parentId = #{parentId},
		    memo = #{memo},
		    ordering = #{ordering},
		    clientId = #{clientId},
		    ownerId = #{ownerId},
		    status=#{status}
	    where id = #{id}
	</update>
	<delete id="delete" parameterType="map">
	    delete from t_role
	    		where id =${id}
	</delete>
	
	<update id="updateField" parameterType="map">
	     update t_role 
		    ${set_sql}
	</update>
	<select id="getScale" parameterType="map" resultType="Object">
	    select ${column} from t_role 
	    ${where}
	    limit 1 offset 0
	</select>
	<select id="get" parameterType="string" resultMap="RoleMap">
	    select t_role.*
	     from t_role
	     where t_role.id = #{id}
	</select>
	<sql id="queryParams">
		<where>
	   		<if test="id!=null and id!=0">
	   			and t_role.id =#{id}
	   		</if>
	   		<if test="nameLike!=null and nameLike!=''">
	   			and t_role.name like '%' || #{nameLike} || '%'
	   		</if>
	   		<if test="name!=null and name!=''">
	   			and t_role.name = #{name}
	   		</if>
	   		<if test="userId!=null">
	   			and t_userRole.userId =#{userId}
	   		</if>
	   		<if test="powerId!=null">
	   			and t_rolePower.powerId =#{powerId}
	   		</if>
	   		<if test="level!=null">
	   			and t_role.level =#{level}
	   		</if>
	   		<if test="parentId!=null">
	   			and t_role.parentId =#{parentId}
	   		</if>
	   		<if test="clientId!=null">
	   			and t_role.clientId =#{clientId}
	   		</if>
	   		<if test="ownerId!=null">
	   			and t_role.ownerId =#{ownerId}
	   		</if>
	   		<if test="status!=null">
	   			and t_role.status=#{status}
	   		</if>
	   	</where>
	</sql>
	<select id="selectByParams" resultMap="RoleMap" parameterType="map">
	   select t_role.*
	   	from t_role left join t_userRole on t_role.id=t_userRole.roleId left join t_rolePower on t_role.id=t_rolePower.roleId
	   	<include refid="queryParams"></include>
	   	group by t_role.id
	   	order by t_role.id desc
	</select>
	
	<select id="selectPageByParams" parameterType="map" resultMap="RoleMap">
	   select t_role.*
	   	from t_role left join t_userRole on t_role.id=t_userRole.roleId left join t_rolePower on t_role.id=t_rolePower.roleId
	   <include refid="queryParams"></include>
	   	group by t_role.id
	   	order by t_role.id desc
	    limit ${pageData.pageSize} offset ${(pageData.currentPage - 1) * pageData.pageSize}
	</select>
	<select id="count" parameterType="map" resultType="int">
	select count(a.*) from(
	    select t_role.*
	   	from t_role left join t_userRole on t_role.id=t_userRole.roleId left join t_rolePower on t_role.id=t_rolePower.roleId
	   <include refid="queryParams"></include>
	   	group by t_role.id
	   	)as a
	</select>
	
	<resultMap type="Role" id="RoleMap">
        <result property="id" column="id" />
        
    </resultMap>
</mapper>


